{"ast":null,"code":"var _jsxFileName = \"/Users/hieunguyen/Desktop/Social Media/Client/src/Component/Post.js\",\n    _s = $RefreshSig$();\n\nimport { Container, makeStyles, Collapse, Typography } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { blue } from \"@material-ui/core/colors\";\nimport SinglePost from \"./SinglePost\";\nimport MakePost from \"./MakePost\";\nimport api from \"./Api\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport Chip from '@material-ui/core/Chip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  ul: {\n    \"& .MuiPaginationItem-root\": {\n      boxShadow: \"none\",\n      textTransform: \"none\",\n      fontSize: 13,\n      padding: \"6px 12px\",\n      lineHeight: 1.5,\n      backgroundColor: blue[600],\n      borderColor: \"#0063cc\",\n      color: \"#fff\",\n      \"&:hover\": {\n        backgroundColor: \"#0069d9\",\n        borderColor: \"#0062cc\",\n        boxShadow: \"none\"\n      },\n      \"&:active\": {\n        boxShadow: \"none\",\n        backgroundColor: \"#0062cc\",\n        borderColor: \"#005cbf\"\n      },\n      \"&:focus\": {\n        boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.5)\"\n      }\n    }\n  }\n}));\nexport default function Post() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [post, setPost] = useState();\n  const [totalPage, setTotalPage] = useState();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentUser, setCurrentUser] = useState();\n  const classes = useStyles();\n  useEffect(() => {\n    async function createPost() {\n      if (post) {\n        try {\n          const body = {\n            content: post.postContent,\n            title: post.postTitle\n          };\n          const res = await api.post(\"/posts\", body, {\n            headers: {\n              Authorization: localStorage.getItem(\"jwt\")\n            }\n          });\n\n          if (currentPage !== 1) {\n            setCurrentPage(1); // user return to page 1 after making a new page \n          } else {\n            setPosts(prevPosts => [res.data.post, ...prevPosts]);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n\n    createPost();\n  }, [post]);\n  useEffect(() => {\n    // only fetch posts after user click on next page or others user make a post\n    async function fetchPost() {\n      const response = await api.get(`/posts/?page=${currentPage}&limit=10`, {\n        headers: {\n          Authorization: localStorage.getItem(\"jwt\")\n        }\n      });\n      const {\n        posts,\n        numPosts,\n        user\n      } = response.data;\n      return {\n        posts,\n        numPosts,\n        user\n      };\n    }\n\n    fetchPost().then(data => {\n      setPosts(data.posts);\n\n      if (!totalPage) {\n        // only set total page when fetching posts for the first time\n        setTotalPage(data.numPosts);\n      }\n\n      if (!currentUser) {\n        setCurrentUser(data.user);\n      }\n    });\n  }, [currentPage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(MakePost, {\n        setPost: setPost,\n        user: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        label: currentPage,\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n        children: posts === null || posts === void 0 ? void 0 : posts.map(post => {\n          return /*#__PURE__*/_jsxDEV(Collapse, {\n            timeout: 1000,\n            children: /*#__PURE__*/_jsxDEV(SinglePost, {\n              post: post\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, post._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        count: totalPage % 10 === 0 ? totalPage / 10 : Math.round(totalPage / 10) + 1,\n        classes: {\n          ul: classes.ul\n        },\n        size: \"large\",\n        style: {\n          marginTop: \"30px\"\n        },\n        onChange: e => setCurrentPage(e.target.innerText)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Post, \"Tvi01sru7G+trAaDQLxd+Bncz0A=\", false, function () {\n  return [useStyles];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/hieunguyen/Desktop/Social Media/Client/src/Component/Post.js"],"names":["Container","makeStyles","Collapse","Typography","useState","useEffect","blue","SinglePost","MakePost","api","Pagination","TransitionGroup","Chip","useStyles","theme","ul","boxShadow","textTransform","fontSize","padding","lineHeight","backgroundColor","borderColor","color","Post","posts","setPosts","post","setPost","totalPage","setTotalPage","currentPage","setCurrentPage","currentUser","setCurrentUser","classes","createPost","body","content","postContent","title","postTitle","res","headers","Authorization","localStorage","getItem","prevPosts","data","err","console","log","fetchPost","response","get","numPosts","user","then","map","_id","Math","round","marginTop","e","target","innerText"],"mappings":"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","sourcesContent":["import { Container, makeStyles, Collapse, Typography } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { blue } from \"@material-ui/core/colors\";\nimport SinglePost from \"./SinglePost\";\nimport MakePost from \"./MakePost\";\nimport api from \"./Api\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles((theme) => ({\n  ul: {\n    \"& .MuiPaginationItem-root\": {\n      boxShadow: \"none\",\n      textTransform: \"none\",\n      fontSize: 13,\n      padding: \"6px 12px\",\n\n      lineHeight: 1.5,\n      backgroundColor: blue[600],\n      borderColor: \"#0063cc\",\n      color: \"#fff\",\n      \"&:hover\": {\n        backgroundColor: \"#0069d9\",\n        borderColor: \"#0062cc\",\n        boxShadow: \"none\",\n      },\n      \"&:active\": {\n        boxShadow: \"none\",\n        backgroundColor: \"#0062cc\",\n        borderColor: \"#005cbf\",\n      },\n      \"&:focus\": {\n        boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.5)\",\n      },\n    },\n  },\n}));\nexport default function Post() {\n  const [posts, setPosts] = useState([]);\n  const [post, setPost] = useState();\n  const [totalPage, setTotalPage] = useState();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentUser, setCurrentUser] = useState();\n  const classes = useStyles();\n  useEffect(() => {\n    async function createPost() {\n      if (post) {\n        try {\n          const body = { content: post.postContent, title: post.postTitle };\n          const res = await api.post(\"/posts\", body, {\n            headers: {\n              Authorization: localStorage.getItem(\"jwt\"),\n            },\n          });\n          if (currentPage !== 1) {\n            setCurrentPage(1); // user return to page 1 after making a new page \n          } else {\n            setPosts((prevPosts) => [res.data.post, ...prevPosts]);\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n    createPost();\n  }, [post]);\n\n  useEffect(() => {\n    // only fetch posts after user click on next page or others user make a post\n    async function fetchPost() {\n      const response = await api.get(`/posts/?page=${currentPage}&limit=10`, {\n        headers: {\n          Authorization: localStorage.getItem(\"jwt\"),\n        },\n      });\n      const { posts, numPosts, user } = response.data;\n      return { posts, numPosts, user };\n    }\n    fetchPost().then((data) => {\n      setPosts(data.posts);\n      if (!totalPage) {\n        // only set total page when fetching posts for the first time\n        setTotalPage(data.numPosts);\n      }\n      if (!currentUser) {\n        setCurrentUser(data.user);\n      }\n    });\n  }, [currentPage]);\n  return (\n    <>\n      <Container maxWidth=\"md\">\n        <MakePost setPost={setPost} user={currentUser} />\n        <Chip\n          label = {currentPage}\n          color = \"primary\"\n          />\n        <TransitionGroup>\n          {posts?.map((post) => {\n            return (\n              <Collapse timeout={1000} key={post._id}>\n                <SinglePost post={post} />\n              </Collapse>\n            );\n          })}\n        </TransitionGroup>\n\n        <Pagination\n          count={\n            totalPage % 10 === 0\n              ? totalPage / 10\n              : Math.round(totalPage / 10) + 1\n          }\n          classes={{ ul: classes.ul }}\n          size=\"large\"\n          style={{ marginTop: \"30px\" }}\n          onChange={(e) => setCurrentPage(e.target.innerText)}\n        />\n      </Container>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}